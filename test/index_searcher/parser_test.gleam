import gleam/list
import gleam/option.{None, Some}
import gleam/string
import gleeunit
import gleeunit/should
import index_searcher/models.{type Package}
import index_searcher/parser.{
  CargoLock, GoMod, GoSum, PackageLockJson, PnpmLock, YarnLock,
  detect_lockfile_type, parse_lockfile,
}
import simplifile

pub fn main() {
  gleeunit.main()
}

// ===== ロックファイル検出テスト =====

pub fn detect_lockfile_type_cargo_test() {
  detect_lockfile_type("Cargo.lock")
  |> should.equal(Some(CargoLock))
}

pub fn detect_lockfile_type_go_mod_test() {
  detect_lockfile_type("go.mod")
  |> should.equal(Some(GoMod))
}

pub fn detect_lockfile_type_go_sum_test() {
  detect_lockfile_type("go.sum")
  |> should.equal(Some(GoSum))
}

pub fn detect_lockfile_type_package_lock_json_test() {
  detect_lockfile_type("package-lock.json")
  |> should.equal(Some(PackageLockJson))
}

pub fn detect_lockfile_type_yarn_lock_test() {
  detect_lockfile_type("yarn.lock")
  |> should.equal(Some(YarnLock))
}

pub fn detect_lockfile_type_pnpm_lock_test() {
  detect_lockfile_type("pnpm-lock.yaml")
  |> should.equal(Some(PnpmLock))
}

pub fn detect_lockfile_type_unknown_test() {
  detect_lockfile_type("unknown.txt")
  |> should.equal(None)
}

// ===== Cargo.lockパーサーテスト =====

pub fn parse_cargo_lock_test() {
  let cargo_lock_content =
    "
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = \"serde\"
version = \"1.0.136\"
source = \"registry+https://github.com/rust-lang/crates.io-index\"

[[package]]
name = \"tokio\"
version = \"1.17.0\"
source = \"registry+https://github.com/rust-lang/crates.io-index\"
"

  // テスト用の一時ファイルを作成
  let test_file = "/tmp/test_cargo.lock"
  let _ = simplifile.write(test_file, cargo_lock_content)

  let result = parse_lockfile(test_file, CargoLock)

  // ファイルを削除
  let _ = simplifile.delete(test_file)

  case result {
    Ok(packages) -> {
      // パッケージが2つ含まれていることを確認
      list.length(packages) |> should.equal(2)

      // serdeパッケージが含まれているかチェック
      let serde_found =
        packages
        |> list.any(fn(pkg: Package) {
          pkg.ecosystem == "cargo"
          && pkg.name == "serde"
          && pkg.version == "1.0.136"
        })
      serde_found |> should.be_true()

      // tokioパッケージが含まれているかチェック
      let tokio_found =
        packages
        |> list.any(fn(pkg: Package) {
          pkg.ecosystem == "cargo"
          && pkg.name == "tokio"
          && pkg.version == "1.17.0"
        })
      tokio_found |> should.be_true()
    }
    Error(_) -> should.fail()
  }
}

// ===== go.modパーサーテスト =====

pub fn parse_go_mod_test() {
  let go_mod_content =
    "module example.com/myproject

go 1.19

require github.com/gin-gonic/gin v1.8.1
require github.com/stretchr/testify v1.7.0
require github.com/gorilla/mux v1.8.0
"

  // テスト用の一時ファイルを作成
  let test_file = "/tmp/test_go.mod"
  let _ = simplifile.write(test_file, go_mod_content)

  let result = parse_lockfile(test_file, GoMod)

  // ファイルを削除
  let _ = simplifile.delete(test_file)

  case result {
    Ok(packages) -> {
      // パッケージが含まれていることを確認
      case list.length(packages) > 0 {
        True -> should.be_true(True)
        False -> should.fail()
      }

      // ginパッケージが含まれているかチェック
      let gin_found =
        packages
        |> list.any(fn(pkg: Package) {
          pkg.ecosystem == "go"
          && pkg.name == "github.com/gin-gonic/gin"
          && pkg.version == "v1.8.1"
        })
      gin_found |> should.be_true()

      // testifyパッケージが含まれているかチェック
      let testify_found =
        packages
        |> list.any(fn(pkg: Package) {
          pkg.ecosystem == "go"
          && pkg.name == "github.com/stretchr/testify"
          && pkg.version == "v1.7.0"
        })
      testify_found |> should.be_true()
    }
    Error(_) -> should.fail()
  }
}

// ===== go.sumパーサーテスト =====

pub fn parse_go_sum_test() {
  let go_sum_content =
    "
github.com/gin-gonic/gin v1.8.1 h1:4+fr/el88TOO3ewCmQr8cx/CtZ/umlIRIs5M4NTNjf8=
github.com/gin-gonic/gin v1.8.1/go.mod h1:ji8BvRH1azfM+SYow9zQ6SZMvR8qOMdHmWbZOot6BSg=
github.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=
github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
"

  // テスト用の一時ファイルを作成
  let test_file = "/tmp/test_go.sum"
  let _ = simplifile.write(test_file, go_sum_content)

  let result = parse_lockfile(test_file, GoSum)

  // ファイルを削除
  let _ = simplifile.delete(test_file)

  case result {
    Ok(packages) -> {
      // パッケージが含まれていることを確認
      case list.length(packages) > 0 {
        True -> should.be_true(True)
        False -> should.fail()
      }

      // ginパッケージが含まれているかチェック（/go.modサフィックスは除外される）
      let gin_found =
        packages
        |> list.any(fn(pkg: Package) {
          pkg.ecosystem == "go"
          && pkg.name == "github.com/gin-gonic/gin"
          && pkg.version == "v1.8.1"
        })
      gin_found |> should.be_true()

      // testifyパッケージが含まれているかチェック
      let testify_found =
        packages
        |> list.any(fn(pkg: Package) {
          pkg.ecosystem == "go"
          && pkg.name == "github.com/stretchr/testify"
          && pkg.version == "v1.7.0"
        })
      testify_found |> should.be_true()

      // /go.modサフィックス付きのエントリは除外されることを確認
      let go_mod_entries =
        packages
        |> list.filter(fn(pkg: Package) {
          string.ends_with(pkg.version, "/go.mod")
        })
      go_mod_entries |> should.equal([])
    }
    Error(_) -> should.fail()
  }
}

// ===== エラーケーステスト =====

pub fn parse_nonexistent_file_test() {
  let result = parse_lockfile("/nonexistent/file.lock", CargoLock)

  case result {
    Error(_) -> should.be_true(True)
    Ok(_) -> should.fail()
  }
}

pub fn parse_unsupported_lockfile_type_test() {
  let test_file = "/tmp/test_empty.lock"
  let _ = simplifile.write(test_file, "")

  let result = parse_lockfile(test_file, YarnLock)
  // YarnLockは未実装

  // ファイルを削除
  let _ = simplifile.delete(test_file)

  case result {
    Error(msg) -> {
      msg |> should.equal("Unsupported lockfile type")
    }
    Ok(_) -> should.fail()
  }
}

// ===== 空ファイルテスト =====

pub fn parse_empty_cargo_lock_test() {
  let test_file = "/tmp/test_empty_cargo.lock"
  let _ = simplifile.write(test_file, "")

  let result = parse_lockfile(test_file, CargoLock)

  // ファイルを削除
  let _ = simplifile.delete(test_file)

  case result {
    Ok(packages) -> {
      packages |> should.equal([])
    }
    Error(_) -> should.fail()
  }
}

pub fn parse_empty_go_mod_test() {
  let test_file = "/tmp/test_empty_go.mod"
  let _ = simplifile.write(test_file, "")

  let result = parse_lockfile(test_file, GoMod)

  // ファイルを削除
  let _ = simplifile.delete(test_file)

  case result {
    Ok(packages) -> {
      packages |> should.equal([])
    }
    Error(_) -> should.fail()
  }
}
