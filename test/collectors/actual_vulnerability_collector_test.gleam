import collectors/actual_vulnerability_collector.{
  Reference, decode_osv_vulnerability,
}
import gleam/option.{None, Some}
import gleeunit
import gleeunit/should

pub fn main() {
  gleeunit.main()
}

pub fn decodes_almalinux_advisory() {
  let sample =
    "{"
    <> "\"id\":\"ALBA-2019:0973\","
    <> "\"affected\":[{\"package\":{\"ecosystem\":\"AlmaLinux:8\",\"name\":\"oci-systemd-hook\"},\"ranges\":[{\"type\":\"ECOSYSTEM\",\"events\":[{\"introduced\":\"0\"},{\"fixed\":\"1:0.1.15-2\"}]}],\"versions\":[]}]"
    <> "}"

  decode_osv_vulnerability(sample)
  |> should.be_ok()
}

// OSV API レスポンスのサンプルJSONデータ
fn get_sample_osv_json() -> String {
  "{
  \"id\": \"OSV-2020-111\",
  \"summary\": \"Heap-use-after-free in int std::__1::__cxx_atomic_fetch_sub<int>\",
  \"details\": \"OSS-Fuzz report: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=21604\",
  \"modified\": \"2022-04-13T03:04:37.331327Z\",
  \"published\": \"2020-06-24T01:51:14.570467Z\",
  \"references\": [
    {
      \"type\": \"REPORT\",
      \"url\": \"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=21604\"
    }
  ],
  \"affected\": [
    {
      \"package\": {
        \"name\": \"poppler\",
        \"ecosystem\": \"OSS-Fuzz\",
        \"purl\": \"pkg:generic/poppler\"
      },
      \"versions\": [],
      \"ranges\": [
        {
          \"type\": \"GIT\",
          \"events\": [
            {
              \"introduced\": \"e4badf4d745b8e8f9a0a25b6c3cc97fbadbbb499\"
            },
            {
              \"fixed\": \"155f73bdd261622323491df4aebb840cde8bfee1\"
            }
          ]
        }
      ],
      \"ecosystem_specific\": {
        \"severity\": \"HIGH\"
      },
      \"database_specific\": {
        \"source\": \"https://github.com/google/oss-fuzz-vulns/blob/main/vulns/poppler/OSV-2020-111.yaml\"
      }
    }
  ],
  \"schema_version\": \"1.4.0\"
}"
}

// 最小限のOSV JSONデータ（オプショナルフィールドなし）
fn get_minimal_osv_json() -> String {
  "{
  \"id\": \"MINIMAL-2024-001\",
  \"published\": \"2024-01-01T00:00:00Z\",
  \"modified\": \"2024-01-01T00:00:00Z\",
  \"references\": [],
  \"affected\": [
    {
      \"package\": {
        \"name\": \"test-package\",
        \"ecosystem\": \"Test\"
      },
      \"versions\": [],
      \"ranges\": [
        {
          \"type\": \"SEMVER\",
          \"events\": []
        }
      ]
    }
  ]
}"
}

// オプショナルフィールドを含むOSV JSONデータ
fn get_osv_json_with_optional_fields() -> String {
  "{
  \"id\": \"OPTIONAL-2024-001\",
  \"published\": \"2024-01-01T00:00:00Z\",
  \"modified\": \"2024-01-01T00:00:00Z\",
  \"references\": [
    {
      \"type\": \"ADVISORY\",
      \"url\": \"https://example.com/advisory\"
    }
  ],
  \"affected\": [
    {
      \"package\": {
        \"name\": \"package-with-versions\",
        \"ecosystem\": \"npm\"
      },
      \"versions\": [\"1.0.0\", \"1.0.1\", \"1.1.0\"],
      \"ranges\": [
        {
          \"type\": \"SEMVER\",
          \"events\": [
            {
              \"introduced\": \"1.0.0\"
            },
            {
              \"fixed\": \"1.2.0\"
            }
          ]
        }
      ]
    }
  ]
}"
}

pub fn json_decode_basic_test() {
  let json_string = get_sample_osv_json()

  // JSONが正しくデコードできることをテスト
  let result = decode_osv_vulnerability(json_string)

  result
  |> should.be_ok()

  case result {
    Ok(vuln) -> {
      vuln.id |> should.equal("OSV-2020-111")
      vuln.published |> should.equal("2020-06-24T01:51:14.570467Z")
      vuln.modified |> should.equal("2022-04-13T03:04:37.331327Z")

      // referencesが正しく抽出されることを確認
      vuln.references
      |> should.equal([
        Reference(
          ref_type: "REPORT",
          url: "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=21604",
        ),
      ])

      // affectedが正しくパースされることを確認
      case vuln.affected {
        [first_affected] -> {
          first_affected.package.name |> should.equal("poppler")
          first_affected.package.ecosystem |> should.equal("OSS-Fuzz")

          case first_affected.ranges {
            [first_range] -> {
              first_range.range_type |> should.equal("GIT")
              // repoフィールドは削除されたのでチェックしない

              case first_range.events {
                [introduced_event, fixed_event] -> {
                  introduced_event.introduced
                  |> should.equal(Some(
                    "e4badf4d745b8e8f9a0a25b6c3cc97fbadbbb499",
                  ))
                  introduced_event.fixed |> should.equal(None)
                  fixed_event.introduced |> should.equal(None)
                  fixed_event.fixed
                  |> should.equal(Some(
                    "155f73bdd261622323491df4aebb840cde8bfee1",
                  ))
                }
                _ -> should.fail()
              }
            }
            _ -> should.fail()
          }
        }
        _ -> should.fail()
      }
    }
    Error(_) -> should.fail()
  }
}

pub fn json_decode_minimal_test() {
  let json_string = get_minimal_osv_json()

  let result = decode_osv_vulnerability(json_string)

  result
  |> should.be_ok()

  case result {
    Ok(vuln) -> {
      vuln.id |> should.equal("MINIMAL-2024-001")
      vuln.references |> should.equal([])

      case vuln.affected {
        [first_affected] -> {
          first_affected.package.name |> should.equal("test-package")
          first_affected.package.ecosystem |> should.equal("Test")
          first_affected.versions |> should.equal([])
          // オプショナルフィールドはデフォルト値
        }
        _ -> should.fail()
      }
    }
    Error(_) -> should.fail()
  }
}

pub fn json_decode_with_optional_fields_test() {
  let json_string = get_osv_json_with_optional_fields()

  let result = decode_osv_vulnerability(json_string)

  result
  |> should.be_ok()

  case result {
    Ok(vuln) -> {
      vuln.id |> should.equal("OPTIONAL-2024-001")
      vuln.references
      |> should.equal([
        Reference(ref_type: "ADVISORY", url: "https://example.com/advisory"),
      ])

      case vuln.affected {
        [first_affected] -> {
          first_affected.package.name |> should.equal("package-with-versions")
          first_affected.versions |> should.equal(["1.0.0", "1.0.1", "1.1.0"])
        }
        _ -> should.fail()
      }
    }
    Error(_) -> should.fail()
  }
}

pub fn json_decode_invalid_json_test() {
  let invalid_json = "{\"invalid\": json"

  let result = decode_osv_vulnerability(invalid_json)

  result
  |> should.be_error()
}

pub fn json_decode_missing_required_fields_test() {
  let incomplete_json = "{\"id\": \"TEST-001\"}"

  let result = decode_osv_vulnerability(incomplete_json)

  result
  |> should.be_error()
}
