import collectors/actual_vulnerability_collector.{
  AffectedPackage, Event, OSVPackage, OSVVulnerability, Range,
}
import gleam/option.{None, Some}
import gleeunit
import gleeunit/should
import index_searcher/models.{VulnMatch}
import index_searcher/searcher
import index_searcher/vuln_index_loader
import simplifile

pub fn main() {
  gleeunit.main()
}

// 実際のpackage-lock.jsonを使ったテスト
pub fn real_cipher_base_detection_test() {
  // 実際のcipher-base脆弱性データ
  let vuln =
    OSVVulnerability(
      id: "GHSA-cpq7-6gpm-g9rc",
      published: "2025-08-21T14:47:35Z",
      modified: "2025-09-13T04:46:43Z",
      references: [],
      affected: [
        AffectedPackage(
          package: Some(OSVPackage(ecosystem: "npm", name: "cipher-base")),
          versions: None,
          ranges: Some([
            Range("SEMVER", [
              Event(Some("0"), None),
              Event(None, Some("1.0.5")),
            ]),
          ]),
        ),
      ],
    )

  // cipher-baseを含むテスト用package-lock.json
  let package_lock_content =
    "{
  \"name\": \"test-app\",
  \"version\": \"1.0.0\",
  \"lockfileVersion\": 2,
  \"requires\": true,
  \"packages\": {
    \"\": {
      \"name\": \"test-app\",
      \"version\": \"1.0.0\"
    },
    \"node_modules/cipher-base\": {
      \"version\": \"1.0.4\",
      \"resolved\": \"https://registry.npmjs.org/cipher-base/-/cipher-base-1.0.4.tgz\",
      \"integrity\": \"sha512-Kkht5ye6ZGmwv40uUDZztayT2ThLQGfnj/T71N/XzeZeo3nf8foyW7zGTsPYkEya3m5f85N1kfSEHjgt+dHPIg==\"
    }
  },
  \"dependencies\": {
    \"cipher-base\": {
      \"version\": \"1.0.4\",
      \"resolved\": \"https://registry.npmjs.org/cipher-base/-/cipher-base-1.0.4.tgz\",
      \"integrity\": \"sha512-Kkht5ye6ZGmwv40uUDZztayT2ThLQGfnj/T71N/XzeZeo3nf8foyW7zGTsPYkEya3m5f85N1kfSEHjgt+dHPIg==\"
    }
  }
}"

  // 一時ディレクトリとファイルを作成
  let temp_dir = "/tmp/test_cipher_vuln_scan"
  let package_lock_path = temp_dir <> "/package-lock.json"

  let assert Ok(_) = simplifile.create_directory_all(temp_dir)
  let assert Ok(_) = simplifile.write(package_lock_path, package_lock_content)

  // インデックスを構築
  let index = searcher.create_vuln_index()
  let assert Ok(count) =
    vuln_index_loader.build_index_from_target_vulnerabilities(index, [vuln])

  count |> should.equal(1)

  // ディレクトリをスキャン
  let scan_result = searcher.scan_directory_sequential(index, temp_dir)

  case scan_result {
    Ok(matches) -> {
      // 脆弱性が検出されることを確認
      case matches {
        [] -> should.fail()
        [VulnMatch(package, vuln_id, _file_path), ..] -> {
          package.name |> should.equal("cipher-base")
          package.version |> should.equal("1.0.4")
          vuln_id |> should.equal("GHSA-cpq7-6gpm-g9rc")
        }
      }
    }
    Error(_msg) -> {
      // エラーメッセージを出力してテストを失敗させる
      should.fail()
    }
  }

  // クリーンアップ
  let assert Ok(_) = simplifile.delete(package_lock_path)
  let assert Ok(_) = simplifile.delete(temp_dir)
}
